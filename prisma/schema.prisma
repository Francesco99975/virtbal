generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Accounts {
  id         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String       @db.VarChar(12)
  bank       Int
  userId     String       @db.Uuid
  users      Users        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statements Statements[]
  payees     Payees[]

  @@map("accounts")
}

model Payees {
  id         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String       @db.VarChar
  type       Int
  accountId  String       @db.Uuid
  accounts   Accounts     @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payees")
}

model Statements {
  id              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  spent           Int
  deposited       Int
  keep            Int
  date            DateTime       @db.Date
  startingBalance Int
  fileHash        String         @db.VarChar
  accountId       String         @db.Uuid
  accounts        Accounts       @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactions    Transactions[]

  @@map("statements")
}

model Transactions {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String     @db.VarChar
  amount      Int
  isDeposit   Boolean
  date        String     @db.VarChar
  statementId String     @db.Uuid
  statements  Statements @relation(fields: [statementId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("transactions")
}

model Users {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username       String     @unique @db.VarChar(12)
  password       Passwords?  
  createdAt      DateTime?  @default(now()) @db.Timestamptz(6)
  accounts       Accounts[]

  @@map("users")
}

model Passwords {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hash           String     @db.VarChar
  user           Users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String     @db.Uuid @unique

  @@map("passwords")
}
